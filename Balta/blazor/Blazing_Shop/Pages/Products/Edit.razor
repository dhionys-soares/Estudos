@page "/products/edit/{id:int}"
@using Microsoft.AspNetCore.Components
@inject AppDbContext _context
@inject NavigationManager _navigationManager

<h1>@_model?.Titulo</h1>

<EditForm Model="@_model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText class="form-control" typeof="text" id="Title" @bind-Value="_model.Titulo"></InputText>
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <InputNumber class="form-control" typeof="number" id="Price" @bind-Value="_model.Price"></InputNumber>
    </div>

    <div class="mb-3">
        <label for="CategoryId" class="form-label">Category</label>
        <InputSelect class="form-control" id="CategoryId" @bind-Value="_model.CategoryId">
            @foreach (var category in _categories)
            {
                <option value="@category.Id">
                    @category.Title
                </option>
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div>
            @_errorMessage
        </div>
    }

    <button class="btn btn-success" type="submit">Save</button>
</EditForm>

@code {

    [Parameter]
    public int id { get; set; }

    public Product? _model = new();
    public List<Category> _categories = new();
    public string? _errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        _categories = await _context.Categories.AsNoTracking().OrderBy(x => x.Title).ToListAsync();
        _model = await _context.Products.AsNoTracking().FirstOrDefaultAsync(x => x.Id == id);
    }

    public async Task HandleSubmit()
    {
        try
        {
            var product = await _context.Products.FirstOrDefaultAsync(x => x.Id == id);
            if (product is null)
                throw new Exception("Produto não encontrado");

            product.Titulo = _model.Titulo;
            product.Price = _model.Price;
            product.CategoryId = _model.CategoryId;

            _context.Update(product);
            await _context.SaveChangesAsync();
            _navigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            _errorMessage = "Falha ao persistir os dados";
        }
    }
}

