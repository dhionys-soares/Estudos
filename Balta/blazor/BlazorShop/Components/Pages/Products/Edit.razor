@page "/products/edit/{id:int}"
@rendermode InteractiveServer
@inject ApplicationDbContext Context
@inject NavigationManager Navigation
@attribute [Authorize]

@if (Product is null)
{
    <p><em>Produto não encontrado</em></p>
}
else
{
    <h1>@Product.Title (@Product.Id)</h1>

    <EditForm Model="@Product" OnValidSubmit="OnValidSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Título</label>
            <InputText class="form-control" @bind-Value="Product.Title" />
        </div>

        <div class="mb-3">
            <label class="form-label">Descrição</label>
            <InputText class="form-control" @bind-Value="Product.Description" />
        </div>

        <div class="mb-3">
            <label class="form-label">Preço</label>
            <InputNumber class="form-control" @bind-Value="Product.Price" />
        </div>

        <div class="mb-3">
            <label class="form-label">Categoria</label>
            <InputSelect class="form-control" @bind-Value="Product.CategoryId" selected>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Title</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-success">Salvar</button>
        <a class="btn btn-light" href="/products">Cancelar</a>

    </EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }

    public Product? Product { get; set; }
    public IEnumerable<Category> Categories { get; set; } = Enumerable.Empty<Category>();

    protected override async Task OnInitializedAsync()
    {
        Categories = await Context.Categories.AsNoTracking().ToListAsync();
        Product = await Context.Products.AsNoTracking().FirstOrDefaultAsync(x => x.Id == id);
    }

    public async Task OnValidSubmit()
    {
        Context.Products.Update(Product);
        await Context.SaveChangesAsync();
        Navigation.NavigateTo("products");
    }
}
