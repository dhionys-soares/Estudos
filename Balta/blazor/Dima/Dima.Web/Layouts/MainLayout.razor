@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider"
                  @bind-IsDarkMode="_isDarkMode"
                  Theme="Configuration.Theme" />

<MudSnackbarProvider />
<MudDialogProvider />
<MudPopoverProvider />

<AuthorizeView>

    <Authorized>
        <MudLayout>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu"Color="Color.Inherit"Edge="@Edge.Start"OnClick="ToggleDrawer" />                
                Dima
                <MudSpacer />
                <MudSpacer />
                <MudButton Href="/lancamentos/novo" Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.Add">Novo lançamento</MudButton>

                <MudText Typo="Typo.caption">@context.User.Identity?.Name</MudText>
                <MudSwitch
                    Color="Color.Inherit"
                    Class="ma-4"
                    T="bool"
                    ThumbIcon="@Icons.Material.TwoTone.Lightbulb"
                    @bind-Value="_isDarkMode" />
            </MudAppBar>
            <MudDrawer @bind-Open="_isDrawerOpened">
                <NavMenu />
                </MudDrawer>
            <MudMainContent>
                <MudContainer Class="mt-4">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>

    <NotAuthorized>
        <LoginRedirect />
    </NotAuthorized>

</AuthorizeView>

@code {
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = null!;
    private bool _isDrawerOpened = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }

    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ToggleDrawer()
    => _isDrawerOpened = !_isDrawerOpened;
}